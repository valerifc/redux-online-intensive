=== Docs

https://lab.lectrum.io/docs/redux/



=== Эффекты Redux Saga

import { takeEvery, all, call, apply, put } from "redux-saga/effects";

takeEvery - "на каждый запуск экшна вызывай такую-то worker-saga".
all - эффект, принимающий массив, где каждый элемент - это вызов другой watcher-saga.
call - предназначен для вызова функций, похож на метод call обычного JS. С эффектами проще поддерживать код в Redux Saga и особенно проще тестировать.
apply - аналогичен call, т.е. вызывает указанную функцию, но лучше подходит для вызова асинхронных функций. apply помогает Redux Saga сохранить контекст вызова функции при обработке асинхронной операции. Первым аргументом передается контекст вызова. Второй аргумент - метод, который необходимо вызвать. Третий аргумент - массив параметров вызываемого метода. Например: const result = yield apply(response, response.json); Здесь Redux Saga будет знать, что метод .json нужно вызывать именно в контексте объекта response.
put - работает точно так же, как store.dispatch(); то есть put предназначен для запуска экшна из worker saga.
При использовании любого эффекта redux-saga нужно обязательно использовать ключевое слово yield.


=== Домены

redux-online-intensive\source\bus\__DOMAIN__
Домен __DOMAIN__ - это домен-шаблон, который будем брать за основу при создании новых доменов.

redux-online-intensive\source\bus\ui
Домен ui хранит состояние ui приложения и некоторые метасостояния.
Состояние загрузки (активного спиннера), например, хорошо хранить в этом домене.



=== JWT токен

JSON Web Token - как пропускной билет.
При первом раз при входе в систему вводим почту и пароль.
В ответ сервер присылает личный токен.
В следующий раз отправляем свой токен и таким образом сервер нас узнает.



=== LocalStorage

В локалсторейдже есть запись loglevel:webpack-dev-server: "INFO"
Ее делает сборщи, на котором работает приложение.



=== react-router-redux
6. Продвинутая аутентификация и роутинг\7. Практика. 6 часть.mp4
Привязка React Router к Redux.
С ее помощью можно хранить и управлять состоянием роутинга в состоянии Redux.
Для хранения состоянием есть специальный редьюсер.
А для управления состоянием навигации можно запускать специальные экшны, которые предоставляет библиотеку.

import { replace } from "react-router-redux"; - экшн заменит текущий адрес в браузере указанным без возможности сделать шаг назад

Технически без этой привязки можно легко обойтись.
Но она может выручить в некоторых тонких сценариях, когда нужно явно сменить роут в какой-то глубокой операции приложения.
Аргументы в пользу этой привязки:
1) Приложение с ней становится более Redux ориентированным. Централизованное состояние Redux это удобно и гибко. Интегрировать состояние в редакс лишним не будет.
2) В некоторых случаях полезно обладать максимальной прозрачностью действий приложения. А запуск экшна Redux роутера для смены состояния навигации как раз дает такую прозрачность.
Плюсы от этоц привязки больше стилистические, чем практические.
